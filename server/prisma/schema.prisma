// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())

  login        String  @unique
  email        String  @unique
  passwordHash String

  token        String?

  name    String?
  surname String?

  chats Chat[]
}

model Chat {
  id Int @id @default(autoincrement())

  nameChat String

  users User[]

  // lastMessageID Int
  // lastMessage Message? @relation(fields: [lastMessageID],references: [id])
}

model Message{
  id Int @id @default(autoincrement()) @unique

  text String

  nextMessage Message[] @relation("MessageRef")
  prevMessage Message? @relation("MessageRef", fields: [prevMessageID],references: [id])
  prevMessageID Int?
  
  // @map("backMessageID")
  // children Message[] @relation("children")
  // parent Message  @relation(fields: [parentId], references: [id])
  // parentId Int @unique


  // @@map("message")
}


// model Chapter {
//   id          Int       @default(autoincrement()) @id
//   // ...
//   parent      Chapter?  @relation(fields: [parentId], references: [id])
//   parentId    Int?
// }

// model User2 {
//   id      Int      @id @default(autoincrement())
//   profile Profile?
// }

// model Profile {
//   id     Int  @id @default(autoincrement())
//   user   User2 @relation(fields: [userId], references: [id])
//   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
// }

// model User4 {
//   id          Int     @id @default(autoincrement())
//   name        String?
  
//   successorId Int?    @unique
//   successor   User4?   @relation("BlogOwnerHistory", fields: [successorId], references: [id])
//   predecessor User4?   @relation("BlogOwnerHistory")
// }